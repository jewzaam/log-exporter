common_labels:
  camera:
    regex: ".*Successfully connected Camera. Id: (.+) Name:.*"
initialize:
- metric: nina_status{category="Utility",item="MessageBox"}
  type: gauge
  value: 0
- metric: nina_status{category="Polar Alignment",item="PolarAlignment"}
  type: gauge
  value: 0
- metric: nina_status{category="Telescope",item="MeridianFlip"}
  type: gauge
  value: 0
# init take exposure error count to 0 so that we can get a rate > 0 when value moves to 1
- metric: nina_error_total{module="Camera",type="TakeExposure",code"Continuing"}
  type: counter
  value: 0
metrics:
- name: nina_total
  rules:
  - op: inc
    regex: .*
  type: counter
- labels:
    type:
      regex: .*[|]Successfully connected ([^.]+)[.].*
  name: nina_equipment
  rules:
  - op: set
    regex: ^.*Successfully connected.*
    value: 1
  type: gauge
- labels:
    type:
      regex: .*[|]Disconnected (.+)$
  name: nina_equipment
  rules:
  - op: set
    regex: .*[|]Disconnected .*
    value: 0
  type: gauge
# logs might have "Item" (older key) or "Container" (newer key). sigh.
- labels:
    category:
      regex: ".*(?:Starting|Skipped|Cancelled|Finishing) Category: ([^,]+),.*"
    item:
      regex: ".*(?:Starting|Skipped|Cancelled|Finishing) Category: [^,]+, (?:Container|Item): ([^,]+)"
  name: nina_status
  rules:
  - op: set
    regex: ".*[|]Run[|].*Starting Category.*"
    value: 1
  type: gauge
- labels:
    category:
      regex: ".*(?:Starting|Skipped|Cancelled|Finishing) Category: ([^,]+),.*"
    item:
      regex: ".*(?:Starting|Skipped|Cancelled|Finishing) Category: [^,]+, (?:Container|Item): ([^,]+)"
  name: nina_status_count
  rules:
  - op: inc
    regex: ".*[|]Run[|].*(?:Starting|Skipped|Cancelled|Finishing) Category.*"
  type: counter
- labels:
    category:
      regex: ".*(?:Starting|Skipped|Cancelled|Finishing) Category: ([^,]+),.*"
    item:
      regex: ".*(?:Starting|Skipped|Cancelled|Finishing) Category: [^,]+, (?:Container|Item): ([^,]+)"
  name: nina_status
  rules:
  - op: set
    regex: ".*[|]Run[|].*(?:Skipped|Cancelled|Finishing) Category.*"
    value: 0
  type: gauge
# ZWO focuser sometimes reports 0K temperature (as -273C) and just needs reconnected. 
# If noticed after sequence starts it will trigger autofocus based on temperature which is just a chunk of time lost.
# Worst case it's missed AND FOCUS NEVER HAPPENS.
#2021-08-27T21:10:50.8207|INFO|FocuserMediator.cs|BroadcastSuccessfulAutoFocusRun|44|Autofocus notification received - Temperature -273
- labels:
    category:
      value: "Focuser"
    item:
      value: "Temperature"
  name: nina_status
  rules:
  - op: set
    regex: ".*Autofocus notification received - Temperature (.*)$"
  type: gauge
# Failure to AutoFocus.  Metric for error and clear autofocus status.
# 2021-11-10T04:19:56.3773|WARNING|AutoFocusVM.cs|StartAutoFocus|721|AutoFocus did not complete successfully, so restoring the focuser position to 12561
# 2021-11-10T04:19:59.9242|ERROR|SequenceItem.cs|Run|222|Category: Focuser, Item: RunAutofocus - 
# NINA.Core.Model.SequenceEntityFailedException: Sequence entity did not successfully run!
#    at NINA.Sequencer.SequenceItem.Autofocus.RunAutofocus.<Execute>d__17.MoveNext() in E:\Projects\nina\NINA.Sequencer\SequenceItem\Autofocus\RunAutofocus.cs:line 94
# --- End of stack trace from previous location where exception was thrown ---
#    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
#    at NINA.Sequencer.SequenceItem.SequenceItem.<Run>d__64.MoveNext() in E:\Projects\nina\NINA.Sequencer\SequenceItem\SequenceItem.cs:line 213
- labels:
    module:
      value: "Focuser"
    type:
      value: "RunAutofocus"
    code:
      value: "Restoring"
  name: nina_error
  rules:
  - op: inc
    regex: ".*ERROR.*Category: Focuser, Item: RunAutofocus.*"
  type: counter
- labels:
    category:
      value: "Focuser"
    item:
      value: "RunAutofocus"
  name: nina_status
  rules:
  - op: set
    regex: ".*ERROR.*Category: Focuser, Item: RunAutofocus.*"
    value: 0
  type: counter
# meridian flip has different logs for autofocus, key off the following to represent the AF bits of MF
# 2022-01-10T23:28:28.2394|INFO|MeridianFlipVM.cs|AutoFocus|207|Meridian Flip - Running Autofocus
# 2022-01-10T23:29:17.7819|INFO|AutoFocusVM.cs|StartAutoFocus|717|AutoFocus completed
# 2022-01-10T23:29:22.5761|DEBUG|AutoFocusVM.cs|StartAutoFocus|757|AutoFocus cleanup complete
# 2022-01-10T23:29:22.5869|INFO|MeridianFlipVM.cs|Recenter|254|Meridian Flip - Recenter after meridian flip
# Note there can be long lag between "complete" and "cleanup" on a non MF AF.
# Therefore, going to assume on MF recenter we call AF done but not until then.
# The other logs statements show up for any other AF...
- labels:
    category:
      value: "Focuser"
    item:
      value: "RunAutofocus"
  name: nina_status
  rules:
  - op: set
    regex: ".*INFO[|]MeridianFlip.*Meridian Flip - Running Autofocus.*"
    value: 1
  type: gauge
- labels:
    category:
      value: "Focuser"
    item:
      value: "RunAutofocus"
  name: nina_status_count
  rules:
  - op: inc
    regex: ".*INFO[|]MeridianFlip.*Meridian Flip - Running Autofocus.*"
  type: counter
- labels:
    category:
      value: "Focuser"
    item:
      value: "RunAutofocus"
  name: nina_status
  rules:
  - op: set
    regex: ".*INFO[|]MeridianFlip.*Meridian Flip - Recenter after meridian flip.*"
    value: 0
  type: gauge
# if Polar Alignment errors at all just drop the gauge to 0 
# 2021-12-09T17:56:42.8103|ERROR|SequenceItem.cs|Run|222|Category: Polar Alignment, Item: PolarAlignment, Rate: 9, Distance: 40 - 
# nina_status{camera="ZWO ASI2600MM Pro #1", category="Polar Alignment", host="z73", instance="localhost:8002", item="PolarAlignment", job="prometheus"}
- labels:
    category:
      value: "Polar Alignment"
    item:
      value: "PolarAlignment"
  name: nina_status
  rules:
  - op: set
    regex: ".*ERROR.*Category: Polar Alignment, Item: PolarAlignment.*"
    value: 0
  type: gauge
# Failure to save image.
# 2021-08-27T21:44:19.9511|ERROR|SequenceItem.cs|Run|222|Category: Camera, Item: TakeExposure.*
- labels:
    module:
      value: "Camera"
    type:
      value: "TakeExposure"
    code:
      value: "Continuing"
  name: nina_error
  rules:
  - op: inc
    regex: ".*ERROR.*Category: Camera, Item: TakeExposure.*"
  type: counter
# This is bad, could mean scope tries to rotate completely around the mount!
# 2022-01-29T21:19:09.6883|INFO|AscomDevice.cs|GetProperty|293|Property ITelescopeFacadeProxy.SideOfPier GET is not implemented in this driver (Device Hub Telescope)
# 2022-01-29T21:19:09.6883|DEBUG|MeridianFlip.cs|TimeToMeridianFlip|61|UseSideOfPier is enabled but pier side is Unknown - ignoring pierside to calculate time to meridian
# 2022-01-29T21:19:09.6883|DEBUG|MeridianFlip.cs|TimeToMeridianFlip|61|UseSideOfPier is enabled but pier side is Unknown - ignoring pierside to calculate time to meridian
# 2022-01-29T21:19:11.6888|DEBUG|MeridianFlip.cs|TimeToMeridianFlip|61|UseSideOfPier is enabled but pier side is Unknown - ignoring pierside to calculate time to meridian
# We should catch this by tracking ASCOM properties, but apparently it's possible for NINA to loose it's mind.
- labels:
    module:
      value: "Telescope"
    type:
      value: "SideOfPier"
    code:
      value: "Ignoring"
  name: nina_error
  rules:
  - op: inc
    regex: ".*UseSideOfPier is enabled but pier side is Unknown - ignoring pierside.*"
  type: counter
# Clear metrics like TakeExposure when interrupted
# 2021-10-21T06:04:23.5454|INFO|SunAltitudeCondition.cs|InterruptWhenSunOutsideOfBounds|58|Sun is outside of the specified range - Interrupting current Instruction Set
# 2021-10-21T02:35:04.5480|INFO|LoopWhileNextTargetBelowAltitude.cs|InterruptWhenTargetBelowAltitude|48|Next Target is above altitude - Interrupting current Instruction Set
# 2021-10-20T23:40:46.7027|INFO|AltitudeCondition.cs|InterruptWhenTargetBelowAltitude|59|Target is below altitude - Interrupting current Instruction Set
- labels:
    category:
      regex: ".*InterruptWhen.*"
      value: "Camera"
    item:
      value: "TakeExposure"
  name: nina_status
  rules:
  - op: set
    regex: ".*InterruptWhen.*"
    value: 0
  type: gauge
# Clear center metric when fails
# 2024-01-21T23:36:33.6374|ERROR|SequenceItem.cs|RunErrorBehavior|193|Instruction Center failed after 1 attempt. Error behavior is set to ContinueOnError. Continuing.
- labels:
    category:
      value: "Scheduler"
    item:
      value: "Center"
  name: nina_status
  rules:
  - op: set
    regex: ".*ERROR.*Instruction Center failed.*"
    value: 0
  type: gauge
# Special cases, Center to clear CenterAndRotate and visa versa
- labels:
    category:
      regex: ".*(?:Starting|Skipped|Cancelled|Finishing) Category: ([^,]+),.*"
    item:
      value: CenterAndRotate
  name: nina_status
  rules:
  - op: set
    regex: ".*[|]Run[|].*(?:Skipped|Cancelled|Finishing) Category.*Item: Center.*"
    value: 0
  type: gauge
- labels:
    category:
      regex: ".*(?:Starting|Skipped|Cancelled|Finishing) Category: ([^,]+),.*"
    item:
      value: Center
  name: nina_status
  rules:
  - op: set
    regex: ".*[|]Run[|].*(?:Skipped|Cancelled|Finishing) Category.*Item: Center.*"
    value: 0
  type: gauge
- labels:
    time:
      regex: ".*Exposure Time:? ([^;]*);"
    filter:
      regex: ".*Filter:? ([^;]*);"
    gain:
      regex: ".*Gain:? ([^;]*);"
    offset:
      regex: ".*Offset:? ([^;]*);"
    binning:
      regex: ".*Binning:? ([^;]*);"
  name: nina_exposure
  rules:
  - op: inc
    regex: .*[|]Capture[|].*Starting Exposure.*
  type: counter
- labels:
    type:
      value: TEMP
  name: nina_detect
  rules:
  - op: set
    regex: ".*[|]ImageSaveController.cs[|].*TEMP_([^_]*).*\\.fits.*"
  type: gauge
- labels:
    type:
      value: HFR
  name: nina_detect
  rules:
  - op: set
    regex: ".*[|]Detect[|].*Average HFR: ([^,]+),.*"
  type: gauge
- labels:
    type:
      value: stars
  name: nina_detect
  rules:
  - op: set
    regex: .*[|]Detect[|].*Detected Stars ([0-9]+),
  type: gauge
- labels:
    type:
      value: RMSARCSEC
  name: nina_detect
  rules:
  - op: set
    regex: ".*[|]ImageSaveController.cs[|].*RMS[A-Z]*_([0-9.]+)_.*"
  type: gauge
- labels:
    category:
      value: "Telescope"
    item:
      value: "MeridianFlip"
  name: nina_status
  rules:
  - op: set
    regex: ".*Meridian Flip - Initializing Meridian Flip.*"
    value: 1
  type: gauge
- labels:
    category:
      value: "Telescope"
    item:
      value: "MeridianFlip"
  name: nina_status_count
  rules:
  - op: inc
    regex: ".*Meridian Flip - Initializing Meridian Flip.*"
  type: counter
- labels:
    category:
      value: "Telescope"
    item:
      value: "MeridianFlip"
  name: nina_status
  rules:
  - op: set
    regex: ".*Meridian Flip - Resuming Autoguider.*"
    value: 0
  type: gauge
- labels:
    module:
      regex: .*[|]ERROR[|]([^|]+)[|].*
    type:
      regex: .*[|]ERROR[|][^|]+[|]([^|]+)[|].*
    code:
      regex: .*[|]ERROR[|].* ([^ ]+)$
  name: nina_error
  rules:
  - op: inc
    regex: .*[|]ERROR[|].*
  type: counter
- labels:
    module:
      regex: .*[|]ERROR[|]([^|]+)[|].*
    type:
      regex: .*[|]ERROR[|][^|]+[|]([^|]+)[|].*
    code:
      regex: .*[|]ERROR[|].* ([^ ]+)$
  name: nina_error
  rules:
  - op: inc
    regex: .*[|]ERROR[|].*
  type: counter
# clear centering gauges when Starting Exposure
- labels:
    category:
      value: "* Instruction Set *"
    item:
      value: "Center"
  name: nina_status
  rules:
  - op: set
    regex: .*[|]Capture[|].*Starting Exposure.*
    value: 0
  type: gauge
- labels:
    category:
      value: "Scheduler"
    item:
      value: "Center"
  name: nina_status
  rules:
  - op: set
    regex: .*[|]Capture[|].*Starting Exposure.*
    value: 0
  type: gauge
- labels:
    category:
      value: "* Instruction Set *"
    item:
      value: "CenterAndRotate"
  name: nina_status
  rules:
  - op: set
    regex: .*[|]Capture[|].*Starting Exposure.*
    value: 0
  type: gauge
# clear status gauges of importance when sequence is cancelled
- labels:
    category:
      value: "* Instruction Set *"
    item:
      value: "Center"
  name: nina_status
  rules:
  - op: set
    regex: ".*Sequence run was cancelled.*"
    value: 0
  type: gauge
- labels:
    category:
      value: "Scheduler"
    item:
      value: "Center"
  name: nina_status
  rules:
  - op: set
    regex: ".*Sequence run was cancelled.*"
    value: 0
  type: gauge
- labels:
    category:
      value: "* Instruction Set *"
    item:
      value: "CenterAndRotate"
  name: nina_status
  rules:
  - op: set
    regex: ".*Sequence run was cancelled.*"
    value: 0
  type: gauge
- labels:
    category:
      value: "Scheduler"
    item:
      value: "CenterAndRotate"
  name: nina_status
  rules:
  - op: set
    regex: ".*Sequence run was cancelled.*"
    value: 0
  type: gauge
- labels:
    category:
      value: "* Instruction Set *"
    item:
      value: "NINA.Sequencer.Container.DeepSkyObjectContainer"
  name: nina_status
  rules:
  - op: set
    regex: ".*Sequence run was cancelled.*"
    value: 0
  type: gauge
- labels:
    category:
      value: "* Instruction Set *"
    item:
      value: "NINA.Sequencer.Container.ParallelContainer"
  name: nina_status
  rules:
  - op: set
    regex: ".*Sequence run was cancelled.*"
    value: 0
  type: gauge
- labels:
    category:
      value: "* Instruction Set *"
    item:
      value: "NINA.Sequencer.Container.SequentialContainer"
  name: nina_status
  rules:
  - op: set
    regex: ".*Sequence run was cancelled.*"
    value: 0
  type: gauge
- labels:
    category:
      value: "* Instruction Set *"
    item:
      value: "NINA.Sequencer.Container.TargetAreaContainer"
  name: nina_status
  rules:
  - op: set
    regex: ".*Sequence run was cancelled.*"
    value: 0
  type: gauge
- labels:
    category:
      value: "* Instruction Set *"
    item:
      value: "NINA.Sequencer.Container.EndAreaContainer"
  name: nina_status
  rules:
  - op: set
    regex: ".*Sequence run was cancelled.*"
    value: 0
  type: gauge
- labels:
    category:
      value: "* Instruction Set *"
    item:
      value: "NINA.Sequencer.Container.SequenceRootContainer"
  name: nina_status
  rules:
  - op: set
    regex: ".*Sequence run was cancelled.*"
    value: 0
  type: gauge
- labels:
    category:
      value: "* Instruction Set *"
    item:
      value: "NINA.Sequencer.Container.StartAreaContainer"
  name: nina_status
  rules:
  - op: set
    regex: ".*Sequence run was cancelled.*"
    value: 0
  type: gauge
- labels:
    category:
      value: "Camera"
    item:
      value: "CoolCamera"
  name: nina_status
  rules:
  - op: set
    regex: ".*Sequence run was cancelled.*"
    value: 0
  type: gauge
- labels:
    category:
      value: "Camera"
    item:
      value: "WarnCamera"
  name: nina_status
  rules:
  - op: set
    regex: ".*Sequence run was cancelled.*"
    value: 0
  type: gauge
- labels:
    category:
      value: "Camera"
    item:
      value: "TakeExposure"
  name: nina_status
  rules:
  - op: set
    regex: ".*Sequence run was cancelled.*"
    value: 0
  type: gauge
- labels:
    category:
      value: "Camera"
    item:
      value: "NINA.Sequence.SequenceItem.Imaging.TakeManyExposures"
  name: nina_status
  rules:
  - op: set
    regex: ".*Sequence run was cancelled.*"
    value: 0
  type: gauge
# Reset MF gauge to 0 if we start guiding.  Will happen if MF had to be canceled mid-sequence.
- labels:
    category:
      value: "Telescope"
    item:
      value: "MeridianFlip"
  name: nina_status
  rules:
  - op: set
    regex: ".*Starting Category: Guider, Item: StartGuiding.*"
    value: 0
  type: gauge
